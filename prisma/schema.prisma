// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   @default("PENDING")
  condition   String
  userId      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String     @id @default(cuid())
  name              String?    @unique
  email             String?    @unique
  password          String?
  followersCounter  Int         @default(0)  
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  reports           Report[]
  blogPosts         BlogPost[]
  favoriteBlogPosts BlogPost[] @relation("UserFavoriteBlogPosts")
  //users who are following this user
  followers         Follow[]   @relation("UserFollows")
  //users whom this user is following
  following         Follow[]   @relation("UserFollowing")
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("UserFollows", fields: [followerId], references: [id])
  following   User   @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model BlogPost {
  id              String    @id @default(cuid())
  title           String
  content         String
  likesCounter    Int       @default(0)
  commentsCounter Int       @default(0)
  createdAt       DateTime  @default(now())
  comments        Comment[]
  userId          String
  username        String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags            Tag[]
  favoritedBy     User[]    @relation("UserFavoriteBlogPosts")
}

model Tag {
  id         String   @id @default(cuid())
  name       String
  blogPostId String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
}

model Comment {
  id         String   @id @default(cuid())
  author     String
  content    String
  createdAt  DateTime @default(now())
  replies    Reply[]
  blogPostId String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
}

model Reply {
  id        String   @id @default(cuid())
  author    String
  content   String
  createdAt DateTime @default(now())
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Newsletter {
  id    String @id @default(cuid())
  email String @unique
}
